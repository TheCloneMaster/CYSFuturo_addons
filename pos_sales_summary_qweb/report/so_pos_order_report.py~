# -*- coding: utf-8 -*-

from openerp import models, fields
from openerp import tools

class so_pos_order_report(models.Model):
     _name = "report.so.pos.order"
     _description = "Sale and Point of Sale Orders Statistics"
     _auto = False
     _order = 'date desc'

     date = fields.Datetime(string='Date Order', readonly=True)
     partner_id = fields.Many2one('res.partner', string='Partner', readonly=True)
     product_id = fields.Many2one('product.product', string='Product', readonly=True)
     product_uom = fields.Many2one('product.uom', string='Unit of Measure', readonly=True)
     categ_id = fields.Many2one('product.category',string='Product Category', readonly=True)
     state = fields.Selection([('draft', 'New'), ('paid', 'Closed'), ('done', 'Synchronized'), ('invoiced', 'Invoiced'), ('cancel', 'Cancelled'), ('manual', 'Sale to Invoice')],
     string='Status')
     user_id = fields.Many2one('res.users', string='Salesperson', readonly=True)
     price_total = fields.Float(string='Total Price', readonly=True)
     total_discount = fields.Float(string='Total Discount', readonly=True)
     company_id = fields.Many2one('res.company', string='Company', readonly=True)
     nbr = fields.Integer(string='# of Lines', readonly=True)
     product_qty = fields.Integer(string='Product Quantity', readonly=True)
     delay_validation = fields.Integer(string='Delay Validation')
     type = fields.Selection([('sale','Sale'), ('pos','Pos')], string="Sales Channel")
     picked = fields.Integer(string='Picked', readonly=True)
     warehouse_id = fields.Many2one('stock.warehouse', string='Warehouse', readonly=True)
     picking_id = fields.Many2one('stock.picking', string='Picking', readonly=True)
     cif_price = fields.Float(string='Total CIF Cost Price', readonly=True)
     stock_qty = fields.Float(string='Stock Qty', readonly=True)
     total_cost_price = fields.Float(string='Total Cost Price', readonly=True)
     order_name= fields.Char(string='Order Name', readonly=True)

     def init(self, cr):
         tools.drop_view_if_exists(cr, 'report_so_pos_order')
         cr.execute(""" CREATE OR REPLACE VIEW report_so_pos_order AS (
             SELECT
             -min(pos_line.id) AS id,
             count(*) AS nbr,
             pos_order.date_order AS date,
             sum(pos_line.qty * uom.factor) AS product_qty,
             sum(pos_line.qty * pos_line.price_unit) AS price_total,
             sum((pos_line.qty * pos_line.price_unit) * (pos_line.discount / 100)) AS total_discount,
             sum(cast(to_char(date_trunc('day',pos_order.date_order) - date_trunc('day',pos_order.create_date),'DD') AS int)) AS delay_validation,
             pos_order.partner_id AS partner_id,
             pos_order.state AS state,
             pos_order.user_id AS user_id,
             count(pos_order.picking_id) AS picked,
             pos_order.company_id AS company_id,
             pos_line.product_id AS product_id,
             template.uom_id AS product_uom,
             template.categ_id AS categ_id,
             move.warehouse_id AS warehouse_id,
             'pos' AS type,
             picking.id AS picking_id,
             move.price_unit AS cif_price,
             move.product_qty AS stock_qty,
             move.price_unit * move.product_qty AS total_cost_price,
             pos_order.name AS order_name

             FROM pos_order_line AS pos_line
             LEFT JOIN pos_order pos_order ON (pos_order.id=pos_line.order_id and pos_order.state in ('done','paid'))
             LEFT JOIN product_product product ON (pos_line.product_id=product.id)
             LEFT JOIN product_template template ON (product.product_tmpl_id=template.id)
             LEFT JOIN product_uom uom ON (uom.id=template.uom_id)
             LEFT JOIN stock_picking picking ON (pos_order.partner_id = picking.partner_id and 
                                                 pos_order.name = picking.origin)
             LEFT JOIN stock_move move ON (picking.id = move.picking_id and move.product_id = pos_line.product_id)
             where pos_order.date_order >= '2015-02-01'
             GROUP BY
             pos_order.date_order, pos_order.partner_id,template.categ_id,pos_order.state,template.uom_id,
             pos_order.user_id,pos_order.company_id,pos_line.product_id,pos_order.create_date,pos_order.picking_id, 
             move.warehouse_id, picking.id, cif_price, stock_qty, total_cost_price, order_name
             HAVING
             sum(pos_line.qty * uom.factor) != 0
             UNION ALL
             SELECT
             min(invoice_line.id) AS id,
             count(*) AS nbr,
             invoice.date_invoice AS date,
             sum(invoice_line.quantity / uom.factor * template_uom.factor) AS product_qty,
             sum(invoice_line.quantity * invoice_line.price_unit) AS price_total,
             sum((invoice_line.quantity * invoice_line.price_unit) * (invoice_line.discount / 100)) AS total_discount,
             extract(epoch from avg(date_trunc('day',invoice.date_invoice)-date_trunc('day',invoice.create_date)))/(24*60*60)::decimal(16,2) AS delay_validation,
             invoice.partner_id AS partner_id,
             invoice.state AS state,
             invoice.user_id AS user_id,
             sale_order.shipped::integer AS picked,
             invoice.company_id AS company_id,
             invoice_line.product_id AS product_id,
             template.uom_id AS product_uom,
             template.categ_id AS categ_id,
             sale_order.warehouse_id AS warehouse_id,
             'sale' AS type,
             move.picking_id AS picking_id,
             move.price_unit AS cif_price,
             move.product_qty AS stock_qty,
             move.price_unit * move.product_qty AS total_cost_price,
             invoice.origin AS order_name

             FROM account_invoice_line AS invoice_line
             LEFT JOIN account_invoice invoice ON (invoice.id=invoice_line.invoice_id and 
                                                   invoice.type in ('out_invoice','out_refund') and
                                                   invoice.state in ('open','paid'))
             LEFT JOIN product_product product ON (invoice_line.product_id=product.id)
             LEFT JOIN product_template template ON (product.product_tmpl_id=template.id)
             LEFT JOIN product_uom uom ON (uom.id=invoice_line.uos_id)
             LEFT JOIN product_uom template_uom ON (template_uom.id=template.uom_id)
             LEFT JOIN sale_order_invoice_rel sale_invoice ON (sale_invoice.invoice_id=invoice.id)
             LEFT JOIN sale_order sale_order ON (sale_order.id=sale_invoice.order_id)
             LEFT JOIN stock_move move ON (sale_order.name = move.origin and move.product_id = invoice_line.product_id)
             where invoice.date_invoice >= '2015-02-01'
             GROUP BY
             invoice.date_invoice,invoice.partner_id,template.categ_id,invoice.state,template.uom_id,
             invoice.user_id,invoice.company_id,invoice_line.product_id,sale_order.shipped,sale_order.warehouse_id, move.picking_id, cif_price, stock_qty, total_cost_price, order_name
order by type, picking_id, order_name, product_id
          )""")

     """  versiÃ³n casi original, total 149  !!!!!!!!!
             SELECT
             -min(pos_line.id) AS id,
             count(*) AS nbr,
             pos_order.date_order AS date,
             sum(pos_line.qty * uom.factor) AS product_qty,
             sum(pos_line.qty * pos_line.price_unit) AS price_total,
             sum((pos_line.qty * pos_line.price_unit) * (pos_line.discount / 100)) AS total_discount,
             sum(cast(to_char(date_trunc('day',pos_order.date_order) - date_trunc('day',pos_order.create_date),'DD') AS int)) AS delay_validation,
             pos_order.partner_id AS partner_id,
             pos_order.state AS state,
             pos_order.user_id AS user_id,
             count(pos_order.picking_id) AS picked,
             pos_order.company_id AS company_id,
             pos_line.product_id AS product_id,
             template.uom_id AS product_uom,
             template.categ_id AS categ_id,
             move.warehouse_id AS warehouse_id,
             'pos' AS type

             FROM pos_order_line AS pos_line
             LEFT JOIN pos_order pos_order ON (pos_order.id=pos_line.order_id)
             LEFT JOIN product_product product ON (pos_line.product_id=product.id)
             LEFT JOIN product_template template ON (product.product_tmpl_id=template.id)
             LEFT JOIN product_uom uom ON (uom.id=template.uom_id)
             LEFT JOIN stock_picking picking ON (pos_order.partner_id = picking.partner_id and pos_order.name = picking.origin)
             LEFT JOIN stock_move move ON (picking.id = move.picking_id and move.product_id = pos_line.product_id)
             where pos_order.date_order >= '2015-02-01'
             GROUP BY
             pos_order.date_order, pos_order.partner_id,template.categ_id,pos_order.state,template.uom_id,
             pos_order.user_id,pos_order.company_id,pos_line.product_id,pos_order.create_date,pos_order.picking_id, move.warehouse_id
             HAVING
             sum(pos_line.qty * uom.factor) != 0
             UNION ALL
             SELECT
             min(invoice_line.id) AS id,
             count(*) AS nbr,
             invoice.date_invoice AS date,
             sum(invoice_line.quantity / uom.factor * template_uom.factor) AS product_qty,
             sum(invoice_line.quantity * invoice_line.price_unit) AS price_total,
             sum((invoice_line.quantity * invoice_line.price_unit) * (invoice_line.discount / 100)) AS total_discount,
             extract(epoch from avg(date_trunc('day',invoice.date_invoice)-date_trunc('day',invoice.create_date)))/(24*60*60)::decimal(16,2) AS delay_validation,
             invoice.partner_id AS partner_id,
             invoice.state AS state,
             invoice.user_id AS user_id,
             sale_order.shipped::integer AS picked,
             invoice.company_id AS company_id,
             invoice_line.product_id AS product_id,
             template.uom_id AS product_uom,
             template.categ_id AS categ_id,
             sale_order.warehouse_id AS warehouse_id,
             'sale' AS type

             FROM account_invoice_line AS invoice_line
             LEFT JOIN account_invoice invoice ON (invoice.id=invoice_line.invoice_id)
             LEFT JOIN product_product product ON (invoice_line.product_id=product.id)
             LEFT JOIN product_template template ON (product.product_tmpl_id=template.id)
             LEFT JOIN product_uom uom ON (uom.id=invoice_line.uos_id)
             LEFT JOIN product_uom template_uom ON (template_uom.id=template.uom_id)
             LEFT JOIN sale_order_invoice_rel sale_invoice ON (sale_invoice.invoice_id=invoice.id)
             LEFT JOIN sale_order sale_order ON (sale_order.id=sale_invoice.order_id)
             where invoice.date_invoice >= '2015-02-01'
             GROUP BY
             invoice.date_invoice,invoice.partner_id,template.categ_id,invoice.state,template.uom_id,
             invoice.user_id,invoice.company_id,invoice_line.product_id,sale_order.shipped,sale_order.warehouse_id
             order by type, order_name, product_id
     """
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
