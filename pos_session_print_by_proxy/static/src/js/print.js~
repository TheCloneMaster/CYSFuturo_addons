odoo.define('pos_session_print_by_proxy.print_pos_session', function (require) {
"use strict";

var core = require('web.core');
var Session = require('web.Session');
var Model = require('web.Model');

var QWeb = core.qweb;
var mixins = core.mixins;
/*
debugger;
var ProxyDevice = core.ProxyDevice;
*/

var ProxyDevice = core.Class.extend(mixins.PropertiesMixin,{
        init: function(parent,options){
            debugger;
            mixins.PropertiesMixin.init.call(this,parent);
            var self = this;
            options = options || {};
            this.proxy_url = options.proxy_url || "http://201.201.230.176:8071";

            this.pos = parent;

            this.weighting = false;
            this.debug_weight = 0;
            this.use_debug_weight = false;

            this.paying = false;
            this.default_payment_status = {
                status: 'waiting',
                message: '',
                payment_method: undefined,
                receipt_client: undefined,
                receipt_shop:   undefined,
            };
            this.custom_payment_status = this.default_payment_status;

            this.receipt_queue = [];

            this.notifications = {};
            this.bypass_proxy = false;

            this.connection = null;
            this.host       = '';
            this.keptalive  = false;

            this.set('status',{});

            this.set_connection_status('disconnected');

            this.on('change:status',this,function(eh,status){
                status = status.newValue;
                if(status.status === 'connected'){
                    self.print_receipt();
                }
            });

            window.hw_proxy = this;
        },
        set_connection_status: function(status,drivers){
            var oldstatus = this.get('status');
            var newstatus = {};
            newstatus.status = status;
            newstatus.drivers = status === 'disconnected' ? {} : oldstatus.drivers;
            newstatus.drivers = drivers ? drivers : newstatus.drivers;
            this.set('status',newstatus);
            debugger;
        },
        disconnect: function(){
            if(this.get('status').status !== 'disconnected'){
                this.connection.destroy();
                this.set_connection_status('disconnected');
            }
        },

        // connects to the specified url
        connect: function(url){
            var self = this;
            this.connection = new Session(undefined,url, { use_cors: true});
            this.host   = url;
            this.set_connection_status('connecting',{});
            debugger;
            return this.message('handshake').then(function(response){
                    if(response){
                        self.set_connection_status('connected');
                        localStorage['hw_proxy_url'] = url;
                        console.log('Connected');
                        //self.keepalive();
                    }else{
                        self.set_connection_status('disconnected');
                        console.error('Connection refused by the Proxy');
                    }
                },function(){
                    self.set_connection_status('disconnected');
                    console.error('Could not connect to the Proxy');
                });
        },
        message : function(name,params){
            var callbacks = this.notifications[name] || [];
            for(var i = 0; i < callbacks.length; i++){
                callbacks[i](params);
            }
            debugger;
            if(this.get('status').status !== 'disconnected'){
                return this.connection.rpc('/hw_proxy/' + name, params || {});
            }else{
                return (new $.Deferred()).reject();
            }
        },
        /*
         * ask the printer to print a receipt
         */
        print_receipt: function(receipt){
            var self = this;
            if(receipt){
                this.receipt_queue.push(receipt);
            }
            var aborted = false;
            function send_printing_job(){
                if (self.receipt_queue.length > 0){
                    var r = self.receipt_queue.shift();
                    self.message('print_xml_receipt',{ receipt: r },{ timeout: 5000 })
                        .then(function(){
                            send_printing_job();
                        },function(error){
                            if (error) {
                                console.log("Error de impresion")
                                return;
                            }
                            self.receipt_queue.unshift(r)
                        });
                }
            }
            send_printing_job();
        },

        // asks the proxy to log some information, as with the debug.log you can provide several arguments.
        log: function(){
            return this.message('log',{'arguments': _.toArray(arguments)});
        },
});


var PosSession  = Backbone.Model.extend({
        initialize: function(attributes){
            return this;
        },
        print_receipts: function(receipts){
            var self = this;
            this.proxy_url = "http://201.201.230.176:8071"

            this.proxy = new ProxyDevice(this);
            this.proxy.connect(this.proxy_url)
            _.each(receipts,function(receipt){
                debugger;
                var renderedReceipt = QWeb.render('XmlPosSession',{
                    receipt: receipt, widget: self,
                });
                self.proxy.print_receipt(renderedReceipt);
            });
        },
        print_pos_session: function(pos_session_ids) {
            var self = this;
            new Model('pos.session').call('export_for_printing',[pos_session_ids]).then(function(pos_session_receipt){
                self.print_receipts(pos_session_receipt);
                return true;
            },function(err,event){
                event.preventDefault();
                console.log("Error")
            });
            return true
        },
    });

var posSessionPrintByProxy = function (instance, context) {
        var pos_session_ids = []
        var posSession = new PosSession(this);

        if (context.context.pos_session_ids) pos_session_ids = context.context.pos_session_ids;
        posSession.print_pos_session(pos_session_ids);
    };

    core.action_registry.add('print_action_pos_session', posSessionPrintByProxy);

return {
    posSessionPrintByProxy: posSessionPrintByProxy,
};


});
